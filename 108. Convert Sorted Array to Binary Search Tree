# 98ms, 54%; 129ms, 11%; 98ms, 54%
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#

class Solution(object):
    
    def helper (self, nums, start, end):
        if start + 1 == end:# len not 2
            root = TreeNode (nums[start])
            root.right = TreeNode (nums[end])
        elif start == end: # len not 1
            root = TreeNode (nums[start])
        elif start + 1 < end:
            mid = start + (end - start) / 2
            root = TreeNode (nums[mid])
            root.left = self.helper (nums, start, mid - 1)
            root.right = self.helper (nums, mid + 1 , end)
        else:
            return None
        return root
        
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        # design: mid = start + end /2; left have have, right have half
        # 0 --5 --> [2] [0,1] [3,4,5]; [0,1] --> mid = 0
        # 0 -- 6 --> [3] [0,1,2] [4,5,6]; [1] (0,0) (2,2)
        # 0 -- 7 ---> [3] [0,1,2] [4,5,6,7]; 
        if len(nums) == 0:
            return []
        if len(nums) == 1:
            return TreeNode (nums[0])
        start, end = 0, len(nums) - 1
        mid = start + (end - start) / 2
        root = TreeNode (nums[mid])
        root.left = self.helper (nums, start, mid - 1)
        root.right = self.helper (nums, mid + 1, end)
        return root
