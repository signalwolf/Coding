# 08:25 -- 
# matrix solution: C *x = T, then C^-1 * x = C^-1 *T ---> c might not have reverse --> use transpose and make Ct * C == integre
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if min(candidates) > target:
            return None
        if len(candidates) == 1:
            if target % candidates[0] == 0 and target / candidate[0] == 1:
                return candidates
            elif target % candidates[0] == 0:
                remain = target / candidates
                temp = []
                while remain != 0:
                    temp.append (candidates[0])
                    remian -= 1
                return temp
            else:
                return None
        else:
            curr = candidates[0]
            candidates = candidates[1:]
            result = []
            i = 0
            while curr * i <= target:
                curr_target = target - curr * i
                if curr_target == 0:
                    return []
                temp = self.combinationSum (candidates, curr_target)
                if temp:
                    result.append (temp)
                i += 1
            return result
