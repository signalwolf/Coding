# 09:28ï¼š09:39
# image you have two pointer, you will need one pointer stay in curr val, another at the previous no dup val
# if curr val == pre no dup val, then it means you needed to move the pre val + 1 since it is confirmed (pre val : curr:val) have no dup
# then every time you calculate the diff, you should calculate the two pointer distance. 
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype:int
        """
        start = maxLength = 0
        usedChar = {}
        # cdd --> maxlength = 2 --> start = 0
        for i in range(len(s)):
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)
            usedChar[s[i]] = i
        return maxLength
