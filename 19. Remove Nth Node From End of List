# General case: use two pointer, one reached the end, then the other shall reached the pre of last n
# for example: first pointer == None, second pointer == 3 which is 3 first pointer's n + 1 before
# notice the n == len(n) case
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# 56ms, 16%; 42ms, 63%; 46ms, 45%
class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        # Test:
        # [1,2,3,4,5] 5--> [None,0] --> None, 1 --> 
        # [1,2,3,4,5] 1 --> [2,0] --> [3,1] [4,2] [5,3] [None, 4] --> 
        # [1] 1
        # [1,2,3,4,5] 4 --> [4,0]
        # define dummy in case of delete the head. 
        dummy = ListNode (0)
        dummy.next = head
        # define ahead, delay tracking the k th and k - n - 1 th; 6,3
        ahead, delay = dummy, dummy
        # test: [0,1,2,3,4,5] 2 --> [1,1] [2,0] [3, -1]-->[3,0] --> 4 - 2 - 1 = 1
        while n >= 0 and ahead != None:
            ahead = ahead.next
            n -= 1
        # while ahead till it reached None, the delay one is pre and pre.next = pre.next.next return dummy.next
        while ahead != None:
            ahead = ahead.next
            delay = delay.next
        delay.next = delay.next.next
        return dummy.next
        
        
