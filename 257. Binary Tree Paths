# 42ms, 75% ; 42ms, 75%; 38ms, 92% 
# run time: 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def helper (self, root, path, output):
        if root == None:
            return None
        if path == '':
            path = str(root.val)
        else:
            path = path + '->' + str (root.val) 
        if root.left == None and root.right == None:
            output.append(path)
        else:
            self.helper (root.left, path, output)
            self.helper (root.right, path, output)
    
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        path = ''
        output = []
        if root == None:
            return []
        self.helper (root, path, output)
        return output
        
