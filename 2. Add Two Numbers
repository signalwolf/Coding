# Code time: 09:15 --> 09:26: 11mins
# first submission: forgot the 5 + 5 = 10 case --> 09:41: 15mins
# total time: 26mins
# run time: 154ms, 29%; 156ms, 23%; 129ms, 57%;
# challenge: few conner case needed consider
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 342 + 465 = 807

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        # 243 + 56 --> 0->7->0->
        dummy = ListNode (0)
        l3 = dummy
        while l1 != None and l2 != None:
            temp = ListNode (l1.val + l2.val)
            l3.next = temp
            l1, l2, l3 = l1.next, l2.next, l3.next
        if l1 != None:
            l3.next = l1
        if l2 != None:
            l3.next = l2
        l3 = dummy.next
        flag = 0
        # 99 + 1 --> 0->10->9->None --> (10,0,1)->(10,0,1)
        while l3.next != None:
            curr = l3.val + flag
            l3.val = curr % 10
            flag = curr / 10
            l3 = l3.next
        curr = l3.val + flag
        l3.val = curr% 10
        if curr / 10 != 0:
            l3.next = ListNode (1)
        return dummy.next
